const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 64,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const GenerateCourseLayout_AI = model.startChat({
  generationConfig,
  // safetySettings: Adjust safety settings
  // See https://ai.google.dev/gemini-api/docs/safety-settings
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate a course tutorial for following details with field as CourseName, Description, topic:php, for description php backend server making, category:programming, noOfChapters:10, totalDuration:3+ hr, difficulty:beginner, along with Chapters= chapterName, about, description, duration for each chapter in JSON format\n",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "CourseName": "PHP Backend Server Development",\n  "Description": "Learn the fundamentals of building robust and dynamic backend servers using PHP, empowering you to create interactive web applications.",\n  "topic": "php",\n  "category": "programming",\n  "noOfChapters": 10,\n  "totalDuration": "3+ hr",\n  "difficulty": "beginner",\n  "Chapters": [\n    {\n      "chapterName": "Introduction to PHP",\n      "about": "Understanding the core concepts of PHP, its history, and its relevance in modern web development.",\n      "description": "Explore the basics of PHP syntax, data types, operators, and control flow structures. Learn how to set up your development environment and execute your first PHP script.",\n      "duration": "30 minutes"\n    },\n    {\n      "chapterName": "Variables and Data Structures",\n      "about": "Working with variables to store and manipulate data in PHP, including arrays and strings.",\n      "description": "Learn how to declare and assign values to variables. Explore different data types, including arrays, strings, and their respective methods for manipulation.",\n      "duration": "45 minutes"\n    },\n    {\n      "chapterName": "Control Flow and Functions",\n      "about": "Mastering conditional statements and loops to control the execution flow of your PHP code. Learn how to define and utilize functions for code reusability.",\n      "description": "Dive into if-else statements, switch cases, for loops, while loops, and do-while loops. Understand the concept of functions, their syntax, and parameters.",\n      "duration": "1 hour"\n    },\n    {\n      "chapterName": "Working with Databases",\n      "about": "Connecting PHP to databases, querying data, and manipulating information using MySQL.",\n      "description": "Learn how to establish a connection to a MySQL database. Explore basic SQL commands for querying, inserting, updating, and deleting data. Implement CRUD operations in PHP.",\n      "duration": "1 hour"\n    },\n    {\n      "chapterName": "PHP Web Forms",\n      "about": "Building dynamic forms to collect user input and process it using PHP.",\n      "description": "Learn how to create HTML forms and handle user submissions. Explore methods for data validation, sanitization, and storing data in a database.",\n      "duration": "1 hour"\n    },\n    {\n      "chapterName": "Sessions and Cookies",\n      "about": "Managing user sessions and storing user preferences using sessions and cookies.",\n      "description": "Understand the concepts of sessions and cookies. Learn how to implement session management to maintain user login states. Explore cookie manipulation for personalized user experiences.",\n      "duration": "45 minutes"\n    },\n    {\n      "chapterName": "API Development with PHP",\n      "about": "Creating RESTful APIs with PHP to enable communication between your server and other applications.",\n      "description": "Learn the principles of RESTful API design. Explore PHP frameworks like Slim or Laravel for building structured APIs. Implement common API methods like GET, POST, PUT, and DELETE.",\n      "duration": "1 hour"\n    },\n    {\n      "chapterName": "Error Handling and Debugging",\n      "about": "Effective techniques for handling errors, debugging code, and ensuring the stability of your PHP applications.",\n      "description": "Learn about different types of errors in PHP. Explore debugging tools and techniques for identifying and resolving issues. Implement error handling mechanisms for a robust backend.",\n      "duration": "45 minutes"\n    },\n    {\n      "chapterName": "Security Best Practices",\n      "about": "Building secure PHP applications by protecting against common vulnerabilities and implementing security measures.",\n      "description": "Understand common security risks in PHP applications, such as SQL injection and XSS. Learn about security best practices, including input validation, sanitization, and encryption techniques.",\n      "duration": "1 hour"\n    },\n    {\n      "chapterName": "Advanced Topics and Frameworks",\n      "about": "Exploring advanced PHP concepts and popular frameworks to elevate your backend development skills.",\n      "description": "Introduce popular frameworks like Laravel and Symfony. Explore advanced features like object-oriented programming in PHP and the concept of dependency injection. Discuss topics like caching and performance optimization.",\n      "duration": "1 hour"\n    }\n  ]\n}\n```',
        },
      ],
    },
  ],
});

export const GenerateChapterContent_AI = model.startChat({
  generationConfig,
  // safetySettings: Adjust safety settings
  // See https://ai.google.dev/gemini-api/docs/safety-settings
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Provide detailed explanations for the chapter: Go Web Frameworks from the course: Go for Website Backend Development. The chapter description is: Learn about the benefits of using web frameworks. Explore popular Go frameworks for routing, middleware, and other web development features., with a duration of 1 hour. Structure the response in JSON format with the following fields:\n    \n    - `title`: Title of the section or concept covered in the chapter.\n    - `explanation`: A detailed explanation of the concept, including key points and examples if applicable.\n    - `codeExample` (if needed): Relevant code snippets or examples in <precode> format.\n    - `additionalResources` (optional): Any additional resources such as links, books, or articles for further reading.\n    \n    Ensure each section is clear, detailed, and organized. Use point-wise explanations if necessary, and include code examples (but remove opening and closing precode tags) when applicable.",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n[\n  {\n    "title": "Introduction to Web Frameworks",\n    "explanation": "Web frameworks are collections of tools and libraries that simplify the process of building web applications. They provide a structure for organizing your code, handling common web development tasks, and streamlining the development workflow.",\n    "codeExample": null,\n    "additionalResources": null\n  },\n  {\n    "title": "Benefits of Using Web Frameworks",\n    "explanation": "Using web frameworks offers numerous advantages for web developers, including:\\n\\n* **Faster Development:** Frameworks provide pre-built components and functions, reducing the need to write everything from scratch. \\n* **Improved Code Organization:** Frameworks promote a structured approach to code organization, making projects easier to manage and maintain.\\n* **Security Enhancements:** Many frameworks include built-in security measures to protect against common vulnerabilities.\\n* **Simplified Common Tasks:** Frameworks handle tasks like routing, request handling, and data validation, allowing developers to focus on core application logic.\\n* **Community Support:** Popular frameworks have active communities that provide documentation, tutorials, and support.",\n    "codeExample": null,\n    "additionalResources": null\n  },\n  {\n    "title": "Common Features of Go Web Frameworks",\n    "explanation": "Most Go web frameworks share common features that simplify web development, including:\\n\\n* **Routing:**  Defining how web requests are mapped to specific functions or handlers.\\n* **Middleware:**  Adding functionality to requests before they reach the final handler (e.g., authentication, logging).\\n* **Templates:**  Rendering dynamic HTML content using data from your application.\\n* **Data Handling:**  Abstractions for interacting with databases and other data sources.\\n* **Error Handling:**  Mechanisms for catching and managing errors gracefully.\\n* **Testing Support:**  Tools and utilities for writing and running tests to ensure code quality.",\n    "codeExample": null,\n    "additionalResources": null\n  },\n  {\n    "title": "Popular Go Web Frameworks",\n    "explanation": "There are several popular Go web frameworks available, each with its strengths and weaknesses. Here are a few prominent examples:\\n\\n* **Gin:**  A lightweight and fast framework known for its performance and ease of use.\\n* **Echo:**  Another high-performance framework focused on simplicity and flexibility.\\n* **Beego:**  A comprehensive framework offering features like ORM, template engines, and built-in tools.\\n* **Fiber:**  An express-inspired framework designed for high-speed web development.",\n    "codeExample": null,\n    "additionalResources": [\n      {\n        "title": "Gin",\n        "link": "https://github.com/gin-gonic/gin"\n      },\n      {\n        "title": "Echo",\n        "link": "https://github.com/labstack/echo"\n      },\n      {\n        "title": "Beego",\n        "link": "https://github.com/beego/beego"\n      },\n      {\n        "title": "Fiber",\n        "link": "https://github.com/gofiber/fiber"\n      }\n    ]\n  },\n  {\n    "title": "Example: Routing with Gin",\n    "explanation": "Here\'s a simple example demonstrating routing with the Gin framework:\\n\\n```go\\npackage main\\n\\nimport (\\n\\t\\"github.com/gin-gonic/gin\\"\\n)\\n\\nfunc main() {\\n\\tr := gin.Default()\\n\\n\\tr.GET(\\"/\\", func(c *gin.Context) {\\n\\t\\tc.JSON(200, gin.H{\\n\\t\\t\\t\\"message\\": \\"Hello, World!\\",\\n\\t\\t})\\n\\t})\\n\\n\\tr.Run() // Listen and serve on 0.0.0.0:8080\\n}",\n    "codeExample": "package main\\n\\nimport (\\n\\t\\"github.com/gin-gonic/gin\\"\\n)\\n\\nfunc main() {\\n\\tr := gin.Default()\\n\\n\\tr.GET(\\"/\\", func(c *gin.Context) {\\n\\t\\tc.JSON(200, gin.H{\\n\\t\\t\\t\\"message\\": \\"Hello, World!\\",\\n\\t\\t})\\n\\t})\\n\\n\\tr.Run() // Listen and serve on 0.0.0.0:8080\\n}",\n    "additionalResources": null\n  },\n  {\n    "title": "Choosing the Right Framework",\n    "explanation": "The best Go web framework for your project depends on factors like:\\n\\n* **Project Size and Complexity:**  For simple projects, lightweight frameworks like Gin or Echo may suffice. For complex applications, frameworks like Beego offer more comprehensive features.\\n* **Performance Requirements:**  Frameworks like Gin and Echo are known for their speed. Choose based on the performance needs of your application.\\n* **Developer Experience:**  Consider the developer\'s familiarity with the framework and the available resources like documentation and community support.",\n    "codeExample": null,\n    "additionalResources": null\n  },\n  {\n    "title": "Conclusion",\n    "explanation": "Go web frameworks offer a powerful foundation for building robust and scalable web applications. Understanding the benefits and features of different frameworks allows developers to select the best tool for their specific project needs. Exploring these frameworks and experimenting with their features is crucial for building efficient and well-structured web applications.",\n    "codeExample": null,\n    "additionalResources": null\n  }\n]\n```',
        },
      ],
    },
    {
      role: "user",
      parts: [
        {
          text: "Provide detailed explanations for the chapter: Data Structures and Algorithms from the course: Python for Data Science. The chapter description is: Explore lists, tuples, dictionaries, sets, and their respective operations. Learn about sorting algorithms, searching algorithms, and their applications in data analysis., with a duration of 1 hour. Structure the response in JSON format with the following fields:\n    \n    - `title`: Title of the section or concept covered in the chapter.\n    - `explanation`: A detailed explanation of the concept, including key points and examples if applicable.\n    - `codeExample` (if needed): Relevant code snippets or examples in <precode> format.\n    - `additionalResources` (optional): Any additional resources such as links, books, or articles for further reading.\n    \n    Ensure each section is clear, detailed, and organized. Use point-wise explanations if necessary, and include code examples(but remove opening and closing precode tags) when applicable.",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n[\n  {\n    "title": "Introduction to Data Structures",\n    "explanation": "Data structures are ways to organize and store data in a computer\'s memory. They provide efficient methods for accessing, manipulating, and managing data. Understanding data structures is crucial in data science because they form the foundation for building efficient algorithms.",\n    "codeExample": null,\n    "additionalResources": null\n  },\n  {\n    "title": "Lists",\n    "explanation": "Lists are ordered collections of items. They are mutable, meaning you can change their contents after creation. \\n\\n* **Creating Lists:**  `my_list = [1, 2, 3, \'hello\']` \\n* **Accessing Elements:**  `my_list[0]` (returns the first element) \\n* **Slicing:**  `my_list[1:3]` (returns elements from index 1 to 2, excluding index 3) \\n* **Adding and Removing Elements:**  `my_list.append(4)`, `my_list.pop()`, `my_list.insert(1, \'world\')`, `my_list.remove(\'hello\')` \\n* **Other Operations:**  `len(my_list)`, `my_list.sort()`, `my_list.reverse()`, `my_list.count(\'hello\')`, `my_list.index(\'hello\')`",\n    "codeExample": "my_list = [1, 2, 3, \'hello\']\\nprint(my_list[0])  # Output: 1\\nprint(my_list[1:3])  # Output: [2, 3]\\nmy_list.append(4)\\nprint(my_list)  # Output: [1, 2, 3, \'hello\', 4]\\nmy_list.sort()\\nprint(my_list)  # Output: [1, 2, 3, 4, \'hello\']",\n    "additionalResources": null\n  },\n  {\n    "title": "Tuples",\n    "explanation": "Tuples are similar to lists but are immutable, meaning their contents cannot be changed after creation. \\n\\n* **Creating Tuples:**  `my_tuple = (1, 2, 3, \'hello\')` \\n* **Accessing Elements:**  `my_tuple[0]` \\n* **Slicing:**  `my_tuple[1:3]` \\n* **Immutable:**  Tuples cannot be modified after creation.",\n    "codeExample": "my_tuple = (1, 2, 3, \'hello\')\\nprint(my_tuple[0])  # Output: 1\\nprint(my_tuple[1:3])  # Output: (2, 3)\\n# my_tuple[0] = 5  # This will raise an error because tuples are immutable",\n    "additionalResources": null\n  },\n  {\n    "title": "Dictionaries",\n    "explanation": "Dictionaries are key-value pairs. They are unordered and mutable. \\n\\n* **Creating Dictionaries:**  `my_dict = {\'name\': \'John\', \'age\': 30, \'city\': \'New York\'}` \\n* **Accessing Values:**  `my_dict[\'name\']` \\n* **Adding and Removing Elements:**  `my_dict[\'occupation\'] = \'Data Scientist\'`, `del my_dict[\'city\']` \\n* **Other Operations:**  `len(my_dict)`, `my_dict.keys()`, `my_dict.values()`, `my_dict.items()`",\n    "codeExample": "my_dict = {\'name\': \'John\', \'age\': 30, \'city\': \'New York\'}\\nprint(my_dict[\'name\'])  # Output: John\\nmy_dict[\'occupation\'] = \'Data Scientist\'\\nprint(my_dict)  # Output: {\'name\': \'John\', \'age\': 30, \'city\': \'New York\', \'occupation\': \'Data Scientist\'}\\ndel my_dict[\'city\']\\nprint(my_dict)  # Output: {\'name\': \'John\', \'age\': 30, \'occupation\': \'Data Scientist\'}",\n    "additionalResources": null\n  },\n  {\n    "title": "Sets",\n    "explanation": "Sets are unordered collections of unique elements. They are mutable and can be used for operations like union, intersection, and difference. \\n\\n* **Creating Sets:**  `my_set = {1, 2, 3, \'hello\'}` \\n* **Adding and Removing Elements:**  `my_set.add(4)`, `my_set.remove(\'hello\')` \\n* **Set Operations:**  `my_set1.union(my_set2)`, `my_set1.intersection(my_set2)`, `my_set1.difference(my_set2)`",\n    "codeExample": "my_set = {1, 2, 3, \'hello\'}\\nmy_set.add(4)\\nprint(my_set)  # Output: {1, 2, 3, 4, \'hello\'}\\nmy_set.remove(\'hello\')\\nprint(my_set)  # Output: {1, 2, 3, 4}\\nmy_set1 = {1, 2, 3}\\nmy_set2 = {3, 4, 5}\\nprint(my_set1.union(my_set2))  # Output: {1, 2, 3, 4, 5}\\nprint(my_set1.intersection(my_set2))  # Output: {3}",\n    "additionalResources": null\n  },\n  {\n    "title": "Sorting Algorithms",\n    "explanation": "Sorting algorithms arrange data in a specific order. Common sorting algorithms include:\\n\\n* **Bubble Sort:**  Compares adjacent elements and swaps them if they are in the wrong order. Simple but inefficient for large datasets.\\n* **Insertion Sort:**  Builds a sorted array by inserting each element into its correct position. Efficient for smaller datasets.\\n* **Merge Sort:**  Divides the array into halves, recursively sorts each half, and then merges the sorted halves. Efficient for larger datasets.\\n* **Quick Sort:**  Chooses a pivot element and partitions the array around it. Recursively sorts the partitions. Efficient for larger datasets.",\n    "codeExample": null,\n    "additionalResources": [\n      {\n        "title": "Bubble Sort",\n        "link": "https://en.wikipedia.org/wiki/Bubble_sort"\n      },\n      {\n        "title": "Insertion Sort",\n        "link": "https://en.wikipedia.org/wiki/Insertion_sort"\n      },\n      {\n        "title": "Merge Sort",\n        "link": "https://en.wikipedia.org/wiki/Merge_sort"\n      },\n      {\n        "title": "Quick Sort",\n        "link": "https://en.wikipedia.org/wiki/Quicksort"\n      }\n    ]\n  },\n  {\n    "title": "Searching Algorithms",\n    "explanation": "Searching algorithms find a specific element within a dataset. Common searching algorithms include:\\n\\n* **Linear Search:**  Examines each element in a sequence until the target element is found. Simple but inefficient for large datasets.\\n* **Binary Search:**  Works on sorted data and repeatedly divides the search interval in half. Highly efficient for large datasets.",\n    "codeExample": null,\n    "additionalResources": [\n      {\n        "title": "Linear Search",\n        "link": "https://en.wikipedia.org/wiki/Linear_search"\n      },\n      {\n        "title": "Binary Search",\n        "link": "https://en.wikipedia.org/wiki/Binary_search"\n      }\n    ]\n  },\n  {\n    "title": "Applications in Data Analysis",\n    "explanation": "Data structures and algorithms have numerous applications in data analysis. They are used for:\\n\\n* **Data Storage and Retrieval:**  Efficiently storing and retrieving large datasets using structures like arrays, trees, and hash tables. \\n* **Data Filtering and Sorting:**  Sorting data for analysis and applying filters to isolate specific subsets of data. \\n* **Data Analysis Techniques:**  Implementing algorithms for data mining, machine learning, and statistical analysis.",\n    "codeExample": null,\n    "additionalResources": null\n  },\n  {\n    "title": "Conclusion",\n    "explanation": "Understanding data structures and algorithms is crucial for data science.  By choosing the right data structure and applying appropriate algorithms, data scientists can efficiently process, analyze, and gain insights from data. It is essential to continue exploring and learning about these concepts for success in the field of data science.",\n    "codeExample": null,\n    "additionalResources": null\n  }\n]\n```',
        },
      ],
    },
  ],
});
